apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'jacoco'
apply plugin: 'me.champeau.gradle.jmh'

//temporary jacoco fix for java8
jacoco {
    toolVersion = "0.7.0.201403182114"
}

sourceCompatibility = 1.6
version = '1.0'

jar {
    manifest {
        attributes 'Implementation-Title': 'javasoft.ch Decimal', 'Implementation-Version': version
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.openjdk.jmh:jmh-core:1.1.1'
    testCompile 'junit:junit:4.11'
    jmh 'org.openjdk.jmh:jmh-core:1.1.1'
    jmh 'org.openjdk.jmh:jmh-generator-annprocess:1.1.1'
    jmh 'org.openjdk.jmh:jmh-generator-annprocess:1.1.1'
}

test {
	//supported system properties for test sets:
	//
	//-DtestVariant=TINY,SMALL,STANDARD,ALL
	//-DtestCases=TINY,SMALL,STANDARD,ALL
	//-DtestScales=TINY,SMALL,STANDARD,ALL
    systemProperties = System.getProperties()
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}

buildscript {
	repositories {
		mavenCentral()
		jcenter()
	}
	
	dependencies {
		classpath 'net.sourceforge.fmpp:fmpp:0.9.14'
		classpath 'me.champeau.gradle:jmh-gradle-plugin:0.1.3'
	}
	
	ant.taskdef(name: 'fmpp', classname:'fmpp.tools.AntTask', classpath: buildscript.configurations.classpath.asPath)
}

def generatedSources = "${buildDir}/generated-src"

task generateSources() << {
	println "Generating sources...."
	ant.fmpp(
		configuration: "src/main/resources/codegen/config.fmpp",
		sourceRoot: "src/main/resources/codegen/templates",
		outputRoot: generatedSources
	)
}
	
compileJava.dependsOn generateSources

sourceSets.main.java {
	srcDirs generatedSources, 'src/main/java'
}
    
jmh {
   include = '.*Benchmark.*' // include pattern (regular expression) for benchmarks to be executed
//   exclude = '.*CheckedBenchmark.*,.*PowBenchmark.*' // exclude pattern (regular expression) for benchmarks to be executed
   exclude = '.*PowBenchmark.*' // exclude pattern (regular expression) for benchmarks to be executed
   benchmarkMode = 'thrpt' // Benchmark mode. Available modes are: [Throughput/thrpt, AverageTime/avgt, SampleTime/sample, SingleShotTime/ss, All/all]
   iterations = 3 // Number of measurement iterations to do.
   timeOnIteration = '1000ms' // Time to spend at each measurement iteration.
   batchSize = 1 // Batch size: number of benchmark method calls per operation. (some benchmark modes can ignore this setting)
   fork = 1 // How many times to forks a single benchmark. Use 0 to disable forking altogether
   failOnError = false // Should JMH fail immediately if any benchmark had experienced the unrecoverable error?
   forceGC = true // Should JMH force GC between iterations?
//   jvm = 'myjvm' // Custom JVM to use when forking.
//   jvmArgs = 'Custom JVM args to use when forking.'
//   jvmArgsAppend = 'Custom JVM args to use when forking (append these)'
//   jvmArgsPrepend = 'Custom JVM args to use when forking (prepend these)'
   humanOutputFile = project.file("${project.buildDir}/reports/jmh/human.txt") // human-readable output file
   resultsFile = project.file("${project.buildDir}/reports/jmh/results.csv") // results file
//   operationsPerInvocation = 10 // Operations per invocation.
//   benchmarkParameters =  [:] // Benchmark parameters.
//   profilers = [] // Use profilers to collect additional data.
   resultFormat = 'CSV' // Result format type (one of CSV, JSON, NONE, SCSV, TEXT)
//   synchronizeIterations = true // Synchronize iterations?
//   threads = 1 // Number of worker threads to run with.
//   threadGroups = [2,3,4] //Override thread group distribution for asymmetric benchmarks.
   timeUnit = 'us' // Output time unit. Available time units are: [m, s, ms, us, ns].
   verbosity = 'NORMAL' // Verbosity mode. Available modes are: [SILENT, NORMAL, EXTRA]
   warmup = '1000ms' // Time to spend at each warmup iteration.
//   warmupBatchSize = 10 // Warmup batch size: number of benchmark method calls per operation.
//   warmupForks = 0 // How many warmup forks to make for a single benchmark. 0 to disable warmup forks.
   warmupIterations = 3 // Number of warmup iterations to do.
//   warmupMode = 'INDI' // Warmup mode for warming up selected benchmarks. Warmup modes are: [INDI, BULK, BULK_INDI].
//   warmupBenchmarks = ['.*Warmup'] // Warmup benchmarks to include in the run in addition to already selected. JMH will not measure these benchmarks, but only use them for the warmup.
//   zip64 = true // Use ZIP64 format for bigger archives
   
}
