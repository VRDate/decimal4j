<?xml version="1.0"?>
<decimal-def xmlns="http://www.decimal4j.org/decimal-def" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.decimal4j.org/decimal-def decmial-def.xsd">
	<methods>
		<method name="getScaleMetrics">
			<signature>
				<desc>
					Returns the metrics associated with the scale of this decimal. Scale defines the number
					of fraction digits and the scale factor applied to the {@code long} value underlying this
					{@code Decimal}.
				</desc>
				<return type="S">the scale metrics object</return>
				<see>ScaleMetrics#getScale()</see>
				<see>ScaleMetrics#getScaleFactor()</see>
			</signature>
		</method>
		<method name="getScale">
			<signature>
				<desc>
					Returns the scale associated with this decimal. The scale defines the number of fraction
					digits applied to the {@code long} value underlying this {@code Decimal}.
				</desc>
				<desc>
					This is a shortcut for {@link ScaleMetrics#getScale()}.
				</desc>
				<return type="int">the scale, a value from 0 to 18</return>
				<see>#getScaleMetrics()</see>
				<see>ScaleMetrics#getScale()</see>
			</signature>
		</method>
		<method name="unscaledValue">
			<signature>
				<desc><![CDATA[
					Returns the unscaled value underlying this {@code Decimal}. This
					{@code Decimal} is <code>(unscaledValue &times; 10<sup>-n</sup>)</code>
					with {@code n} representing the {@link #getScale() scale}, hence the
					returned value equals <code>(this &times; 10<sup>n</sup>)</code>
				]]></desc>
				<return type="long">
					the unscaled numeric value, same as this decimal without applying the scale
					factor
				</return>
				<see>#getScale()</see>
				<see>ScaleMetrics#getScaleFactor()</see>
			</signature>
		</method>
		<method name="getFactory">
			<signature>
				<desc>
					Returns the factory that can be used to create other decimal values of the same scale as
					{@code this} Decimal.
				</desc>
				<return type="DecimalFactory&lt;S>">
					the factory to create other decimal values of the same scale as this
					Decimal.
				</return>
				<see>Factories#getDecimalFactory(int)</see>
			</signature>
		</method>
		<method name="round">
			<def>
				<desc name="round-note">
					Note that contrary to the {@code scale(..)} operations this method does not
					change the scale of the value --- extra digits are simply zeroised.
				</desc>
				<desc name="round-examples"><![CDATA[
					<i>Examples and special cases:</i>
					<dl>
					<dt>precision = 0</dt>
					<dd>value is rounded to an integer value</dd>
					<dt>precision = 2</dt>
					<dd>value is rounded to the second digit after the decimal point</dd>
					<dt>precision = -3</dt>
					<dd>value is rounded to the thousands</dd>
					<dt>precision >= scale</dt>
					<dd>values is left unchanged</dd>
					<dt>precision < scale - 18</dt>
					<dd>{@code IllegalArgumentException} is thrown</dd>
					</dl>
				]]></desc>
				<param name="precision" type="int">
					the precision to use for the rounding, for instance 2 to
					round to the second digit after the decimal point; must be at least {@code (scale - 18)}
				</param>
				<param name="roundingMode" type="Roundingmode">
					the rounding mode to apply when rounding to the desired precision
				</param>
				<param name="truncationPolicy" type="Roundingmode">
					the truncation policy to apply when rounding to the desired precision
				</param>
				<return type="Decimal&lt;s>">
					a decimal instance rounded to the given precision
				</return>
				<throws type="IllegalArgumentException">
					if {@code precision < scale - 18}
				</throws>
			</def>
			<signature>
				<desc>
					Returns a {@code Decimal} value rounded to the specified {@code precision} using {@link
					RoundingMode#HALF_UP HALF_UP} rounding.
				</desc>
				<desc xpath-ref="../../def/desc[name=round-note]" />
				<desc xpath-ref="../../def/desc[name=round-examples]" />
				<param xpath-ref="../../def/param[name=precision]" />
				<return xpath-ref="../../def/return" />
				<throws xpath-ref="../../def/throws[type=IllegalArgumentException]" />
			</signature>
			<signature>
				<desc>
					Returns a {@code Decimal} value rounded to the specified {@code precision} using the
					given rounding mode.
				</desc>
				<desc xpath-ref="../../def/desc[name=round-note]" />
				<desc xpath-ref="../../def/desc[name=round-examples]" />
				<param xpath-ref="../../def/param[name=precision]" />
				<param xpath-ref="../../def/param[name=roundingMode]" />
				<return xpath-ref="../../def/return" />
				<throws xpath-ref="../../def/throws[type=IllegalArgumentException]" />
				<throws xpath-ref="/definitions/throws[name=rounding-necessary,type=ArithmeticException]" />
			</signature>
			<signature>
				<desc>
					Returns a {@code Decimal} value rounded to the specified {@code precision} using the
					given rounding mode.
				</desc>
				<desc xpath-ref="../../def/desc[name=round-note]" />
				<desc xpath-ref="../../def/desc[name=round-examples]" />
				<param xpath-ref="../../def/param[name=precision]" />
				<param xpath-ref="../../def/param[name=truncationPolicy]" />
				<return xpath-ref="../../def/return" />
				<throws xpath-ref="../../def/throws[type=IllegalArgumentException]" />
				<throws xpath-ref="/definitions/throws[name=rounding-necessary-or-overflow,type=ArithmeticException]" />
			</signature>
		</method>
		<method name="scale">
			<def>
				<generic-declaration>
					<type name="S" extends="ScaleMetrics"/>
				</generic-declaration>
				<param name="scale" type="int">
					the scale to use for the result, must be in {@code [0,18]}
				</param>
				<param name="scaleMetrics" type="S">
					the scale to use for the result, must be in {@code [0,18]}
				</param>
				<return name="wildcard" type="Decimal&lt;?>">
					a decimal instance with the given new scale
				</return>
				<return name="typed" type="Decimal&lt;S>">
					a decimal instance with the given new scale
				</return>
				<throws type="IllegalArgumentException">
					if {@code scale &lt; 0} or {@code scale &gt; 18}
				</throws>
				<throws type="IllegalArgumentException">
					if {@code scale &lt; 0} or {@code scale &gt; 18}
				</throws>
			</def>
			<signature>
				<desc>
					Returns a {@code Decimal} value whose {@link #getScaleMetrics() scale} is
					changed to the give value. {@link RoundingMode#HALF_UP HALF_UP} rounding
					is used if the scale change involves rounding.
				</desc>
				<param xpath-ref="../../def/param[name=scale]"/>
				<return xpath-ref="../../def/return[name=wildcard]"/>
				<throws xpath-ref="../../def/throws[type=IllegalArgumentException]"/>
			</signature>
			<signature>
				<desc>
					Returns a {@code Decimal} value whose {@link #getScaleMetrics() scale} is
					changed to the give value. {@link RoundingMode#HALF_UP HALF_UP} rounding
					is used if the scale change involves rounding.
				</desc>
				<generic-declaration xpath-ref="../../def/generic-declaration"/>
				<param xpath-ref="../../def/param[name=scaleMetrics]"/>
				<return xpath-ref="../../def/return[name=typed]"/>
				<throws xpath-ref="../../def/throws[type=IllegalArgumentException]"/>
				<suppress value="hiding"/>
			</signature>
			<signature>
				<desc>
					Returns a {@code Decimal} value whose {@link #getScaleMetrics() scale} is
					changed to the give value. The specified {@code roundingMode} is used if 
					the scale change involves rounding.
				</desc>
				<param xpath-ref="../../def/param[name=scale]"/>
				<param xpath-ref="../../def/param[name=roundingMode]"/>
				<return xpath-ref="../../def/return[name=wildcard]"/>
				<throws xpath-ref="../../def/throws[type=IllegalArgumentException]"/>
				<throws xpath-ref="/definitions/throws[name=rounding-necessary,type=ArithmeticException]" />
			</signature>
			<signature>
				<desc>
					Returns a {@code Decimal} value whose {@link #getScaleMetrics() scale} is
					changed to the give value. The specified {@code roundingMode} is used if 
					the scale change involves rounding.
				</desc>
				<generic-declaration xpath-ref="../../def/generic-declaration"/>
				<param xpath-ref="../../def/param[name=scaleMetrics]"/>
				<param xpath-ref="../../def/param[name=roundingMode]"/>
				<return xpath-ref="../../def/return[name=typed]"/>
				<throws xpath-ref="../../def/throws[type=IllegalArgumentException]"/>
				<throws xpath-ref="/definitions/throws[name=rounding-necessary,type=ArithmeticException]" />
				<suppress value="hiding"/>
			</signature>
			<signature>
				<desc>
					Returns a {@code Decimal} value whose {@link #getScaleMetrics() scale} is
					changed to the give value. The specified {@code truncationPolicy} is used
					if the scale change involves rounding or overflow.
				</desc>
				<param xpath-ref="../../def/param[name=scale]"/>
				<param xpath-ref="../../def/param[name=truncationPolicy]"/>
				<return xpath-ref="../../def/return[name=wildcard]"/>
				<throws xpath-ref="../../def/throws[type=IllegalArgumentException]"/>
				<throws xpath-ref="/definitions/throws[name=rounding-necessary-or-overflow,type=ArithmeticException]" />
			</signature>
			<signature>
				<desc>
					Returns a {@code Decimal} value whose {@link #getScaleMetrics() scale} is
					changed to the give value. The specified {@code truncationPolicy} is used
					if the scale change involves rounding or overflow.
				</desc>
				<generic-declaration xpath-ref="../../def/generic-declaration"/>
				<param xpath-ref="../../def/param[name=scaleMetrics]"/>
				<param xpath-ref="../../def/param[name=truncationPolicy]"/>
				<return xpath-ref="../../def/return[name=typed]"/>
				<throws xpath-ref="../../def/throws[type=IllegalArgumentException]"/>
				<throws xpath-ref="/definitions/throws[name=rounding-necessary-or-overflow,type=ArithmeticException]" />
				<suppress value="hiding"/>
			</signature>
		</method>
		<method name="add">
			<def>
				<desc name="addition">
					Returns a {@code Decimal} whose value is {@code (this + augend)}.
				</desc>
				<desc name="augend-conversion-roundingMode">
					The augend argument is converted into a decimal number of the same scale
					as {@code this} decimal before performing the operation. If the
					conversion involves rounding, the specified {@code roundingMode} is used.
				</desc>
				<desc name="augend-conversion-truncationPolicy">
					The augend argument is converted into a decimal number of the same scale
					as {@code this} decimal before performing the operation. If the
					conversion involves rounding or overflows, the specified {@code overflowPolicy} 
					is used.
				</desc>
				<param name="augend" type="Decimal&lt;S>">
					the value to be added to this {@code Decimal}
				</param>
				<param name="augend-wildcard" type="Decimal&lt;?>">
					the value to be added to this {@code Decimal}
				</param>
				<param name="roundingMode" type="RoundingMode">
					the rounding mode to apply if the augend argument needs to be
					truncated when converted into a decimal number of the same
					scale as {@code this} decimal
				</param>
				<return type="Decimal&lt;S>">
					{@code this + augend}
				</return>
			</def>
			<signature>
				<desc xpath-ref="../../def/desc[name=addition]"/>
				<desc xpath-ref="/definitions/desc[name=return-value-immutable-mutable]" />
				<param xpath-ref="../../def/param[name=augend]"/>
				<return xpath-ref="../../def/return"/>
			</signature>
			<signature>
				<desc xpath-ref="../../def/desc[name=addition]"/>
				<desc xpath-ref="/definitions/desc[name=return-value-immutable-mutable]" />
				<desc xpath-ref="../../def/desc[name=augend-conversion-roundingMode]"/>
				<param xpath-ref="../../def/param[name=augend-wildcard]"/>
				<param xpath-ref="../../def/param[name=roundingMode]"/>
				<return xpath-ref="../../def/return"/>
				<throws xpath-ref="/definitions/throws[name=rounding-necessary,type=ArithmeticException]" />
			</signature>
			<signature>
				<desc xpath-ref="../../def/desc[name=addition]"/>
				<desc xpath-ref="/definitions/desc[name=return-value-immutable-mutable]" />
				<desc xpath-ref="../../def/desc[name=augend-conversion-truncationPolicy]"/>
				<param xpath-ref="../../def/param[name=augend-wildcard]"/>
				<param xpath-ref="../../def/param[name=truncationPolicy]"/>
				<return xpath-ref="../../def/return"/>
				<throws xpath-ref="/definitions/throws[name=rounding-necessary-or-overflow,type=ArithmeticException]" />
			</signature>
		</method>
	</methods>
	<definitions>
		<desc name="return-value-immutable-mutable">
			The returned value is a new instance if this decimal is an
			{@link ImmutableDecimal}. If it is a {@link MutableDecimal} then its
			internal state is altered and {@code this} is returned as result now
			representing the outcome of the operation.
		</desc>
		<throws name="rounding-necessary" type="ArithmeticException">
			if {@code roundingMode=UNNECESSARY} and rounding is
			necessary
		</throws>
		<throws name="rounding-necessary-or-overflow" type="ArithmeticException">
			if {@code truncationPolicy} specifies {@link RoundingMode#UNNECESSARY} and rounding is 
			necessary or if an overflow occurs and the policy declares {@link OverflowMode#CHECKED}
		</throws>
	</definitions>
</decimal-def>